// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: commands.sql

package repository

import (
	"context"
)

const commandById = `-- name: CommandById :one
SELECT id, aliased, expanded_preview, expanded_full, start_ts, end_ts, peer_ip, tmux_session, tmux_window, tmux_pane
FROM commands
WHERE id = ?
LIMIT 1
`

func (q *Queries) CommandById(ctx context.Context, id string) (Command, error) {
	row := q.db.QueryRowContext(ctx, commandById, id)
	var i Command
	err := row.Scan(
		&i.ID,
		&i.Aliased,
		&i.ExpandedPreview,
		&i.ExpandedFull,
		&i.StartTs,
		&i.EndTs,
		&i.PeerIp,
		&i.TmuxSession,
		&i.TmuxWindow,
		&i.TmuxPane,
	)
	return i, err
}

const insertCommand = `-- name: InsertCommand :exec
INSERT INTO commands
(id, aliased, expanded_preview, expanded_full, start_ts, end_ts, peer_ip, tmux_session, tmux_window, tmux_pane)
VALUES (
?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
RETURNING id, aliased, expanded_preview, expanded_full, start_ts, end_ts, peer_ip, tmux_session, tmux_window, tmux_pane
`

type InsertCommandParams struct {
	ID              string `json:"id"`
	Aliased         string `json:"aliased"`
	ExpandedPreview string `json:"expanded_preview"`
	ExpandedFull    string `json:"expanded_full"`
	StartTs         string `json:"start_ts"`
	EndTs           string `json:"end_ts"`
	PeerIp          string `json:"peer_ip"`
	TmuxSession     string `json:"tmux_session"`
	TmuxWindow      string `json:"tmux_window"`
	TmuxPane        string `json:"tmux_pane"`
}

func (q *Queries) InsertCommand(ctx context.Context, arg InsertCommandParams) error {
	_, err := q.db.ExecContext(ctx, insertCommand,
		arg.ID,
		arg.Aliased,
		arg.ExpandedPreview,
		arg.ExpandedFull,
		arg.StartTs,
		arg.EndTs,
		arg.PeerIp,
		arg.TmuxSession,
		arg.TmuxWindow,
		arg.TmuxPane,
	)
	return err
}

const listCommands = `-- name: ListCommands :many
SELECT id, aliased, expanded_preview, expanded_full, start_ts, end_ts, peer_ip, tmux_session, tmux_window, tmux_pane
FROM commands
`

func (q *Queries) ListCommands(ctx context.Context) ([]Command, error) {
	rows, err := q.db.QueryContext(ctx, listCommands)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Command
	for rows.Next() {
		var i Command
		if err := rows.Scan(
			&i.ID,
			&i.Aliased,
			&i.ExpandedPreview,
			&i.ExpandedFull,
			&i.StartTs,
			&i.EndTs,
			&i.PeerIp,
			&i.TmuxSession,
			&i.TmuxWindow,
			&i.TmuxPane,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchCommandByAliased = `-- name: SearchCommandByAliased :many
SELECT id, aliased, expanded_preview, expanded_full, start_ts, end_ts, peer_ip, tmux_session, tmux_window, tmux_pane
FROM commands
WHERE aliased = ?
`

func (q *Queries) SearchCommandByAliased(ctx context.Context, aliased string) ([]Command, error) {
	rows, err := q.db.QueryContext(ctx, searchCommandByAliased, aliased)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Command
	for rows.Next() {
		var i Command
		if err := rows.Scan(
			&i.ID,
			&i.Aliased,
			&i.ExpandedPreview,
			&i.ExpandedFull,
			&i.StartTs,
			&i.EndTs,
			&i.PeerIp,
			&i.TmuxSession,
			&i.TmuxWindow,
			&i.TmuxPane,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
